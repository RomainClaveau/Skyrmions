# Based on "70 lines of Numpy" (Copyright (C) 2014 Claas Abert)
# Solving the sLLG equation : (1 + l^2)ds/dt = w x s + l * s x (w x s)


########################
# Importing librairies #
########################
import numpy as np
from math import asinh, atan, sqrt, pi

#######################################
# Setup mesh and material constraints #
#######################################
n     = (1, 1, 1)
dx    = (5e-9, 5e-9, 3e-9)
gamma = 2.211e5
eps   = 1e-25 # Small number to avoid division by 0
mu0   = 4e-7 * pi
ms    = 8e5
A     = 1.3e-11
D     = 5e7 # 1 rad.GHz
tau   = 1e-11 # Weak correlation time

#############################
# Defining Newell functions #
#############################
def f(p):
  x, y, z = abs(p[0]), abs(p[1]), abs(p[2])
  return + y / 2.0 * (z**2 - x**2) * asinh(y / (sqrt(x**2 + z**2) + eps)) \
         + z / 2.0 * (y**2 - x**2) * asinh(z / (sqrt(x**2 + y**2) + eps)) \
         - x*y*z * atan(y*z / (x * sqrt(x**2 + y**2 + z**2) + eps))       \
         + 1.0 / 6.0 * (2*x**2 - y**2 - z**2) * sqrt(x**2 + y**2 + z**2)

def g(p):
  x, y, z = p[0], p[1], abs(p[2])
  return + x*y*z * asinh(z / (sqrt(x**2 + y**2) + eps))                         \
         + y / 6.0 * (3.0 * z**2 - y**2) * asinh(x / (sqrt(y**2 + z**2) + eps)) \
         + x / 6.0 * (3.0 * z**2 - x**2) * asinh(y / (sqrt(x**2 + z**2) + eps)) \
         - z**3 / 6.0 * atan(x*y / (z * sqrt(x**2 + y**2 + z**2) + eps))        \
         - z * y**2 / 2.0 * atan(x*z / (y * sqrt(x**2 + y**2 + z**2) + eps))    \
         - z * x**2 / 2.0 * atan(y*z / (x * sqrt(x**2 + y**2 + z**2) + eps))    \
         - x*y * sqrt(x**2 + y**2 + z**2) / 3.0

################################
# Setup demagnetization tensor #
################################
'''
def set_n_demag(c, permute, func):
  print "Setup magnetization tensor"
  it = np.nditer(n_demag[:,:,:,c], flags=['multi_index'], op_flags=['writeonly'])
  while not it.finished:
    value = 0.0
    for i in np.rollaxis(np.indices((2,)*6), 0, 7).reshape(64, 6):
      idx = map(lambda k: (it.multi_index[k] + n[k]) % (2*n[k]) - n[k], range(3))
      value += (-1)**sum(i) * func(map(lambda j: (idx[j] + i[j] - i[j+3]) * dx[j], permute))
    it[0] = - value / (4 * pi * np.prod(dx))
    it.iternext()

n_demag = np.zeros([1 if i==1 else 2*i for i in n] + [6])
for i, t in enumerate(((f,0,1,2),(g,0,1,2),(g,0,2,1),(f,1,2,0),(g,1,2,0),(f,2,0,1))):
  set_n_demag(i, t[1:], t[0])

m_pad     = np.zeros([1 if i==1 else 2*i for i in n] + [3])
f_n_demag = np.fft.rfftn(n_demag, axes = filter(lambda i: n[i] > 1, range(3)))
'''

######################################################################
# Computing effective field (Demagnetization field + Exchange field) #
######################################################################
def h_eff(s):
  # demag field
  '''
  m_pad[:n[0],:n[1],:n[2],:] = s
  f_m_pad = np.fft.rfftn(m_pad, axes = filter(lambda i: n[i] > 1, range(3)))
  f_h_demag_pad = np.zeros(f_m_pad.shape, dtype=f_m_pad.dtype)
  f_h_demag_pad[:,:,:,0] = (f_n_demag[:,:,:,(0, 1, 2)]*f_m_pad).sum(axis = 3)
  f_h_demag_pad[:,:,:,1] = (f_n_demag[:,:,:,(1, 3, 4)]*f_m_pad).sum(axis = 3)
  f_h_demag_pad[:,:,:,2] = (f_n_demag[:,:,:,(2, 4, 5)]*f_m_pad).sum(axis = 3)
  h_demag = np.fft.irfftn(f_h_demag_pad, axes = filter(lambda i: n[i] > 1, range(3)))[:n[0],:n[1],:n[2],:]

  # exchange field
  h_ex = - 2 * s * sum([1/x**2 for x in dx])
  for i in range(6):
    h_ex += np.repeat(s, 1 if n[i%3] == 1 else [i/3*2] + [1]*(n[i%3]-2) + [2-i/3*2], axis = i%3) / dx[i%3]**2

  h = ms * h_demag + 2 * A / (mu0 * ms) * h_ex

  return h
  '''

  return 0

############################################################
# Computing the magnetization dynamics using an integrator #
############################################################

def computing_W(): # Computing <w x s> with w the random Gaussian variable
    value = np.zeros(n + (3,3,))
    value[:,:,:,1,2] = -D
    value[:,:,:,2,1] = D
    return value


def F(s, h, W, S, tau):
    value = np.zeros(3)
    for i in range(3):
        for k in range(3):
            value[i] -= coeff * alpha * (h[k] * S[k][i] - h[i] * S[k][k])
            for j in range(3):
                value[i] += coeff * (epsilon[i][j][k] * h[j] * s[k] + epsilon[i][j][k] * W[j][k])
    return value

def G(s, h, W, S, tau):
    value = np.zeros((3, 3))
    for i in range(3):
        for j in range(3):
            value[i][j] -= W[i][j] / tau
            for l in range(3):
                value[i][j] +=  D * epsilon[j][i][l] * s[l] / tau - coeff * alpha * (h[l] * (s[l] * W[i][j] + s[j] * W[i][l]) - 2 * h[j] * s[l] * W[i][l])
                for k in range(3):
                    value[i][j] += coeff * (epsilon[j][k][l] * h[k] * W[i][l])
    return value

def H(s, h, W, S, tau):
    value = np.zeros((3, 3))
    for i in range(3):
        for j in range(3):
            for l in range(3):
                value[i][j] -= coeff * alpha * (h[l] * (s[i] * S[l][j] + s[l] * S[i][j] + s[j] * S[i][l] - 2 * s[i] * s[j] * s[l]) - h[j] * (s[i] * S[l][l] + 2 * s[l] * S[i][l] - 2 * s[i] * s[l] * s[l]) + h[l] * (s[j] * S[l][i] + s[l] * S[j][i] + s[i] * S[j][l] - 2 * s[j] * s[i] * s[l]) - h[i] * (s[j] * S[l][l] + 2 * s[l] * S[j][l] - 2 * s[j] * s[l] * s[l]))
                for k in range(3):
                    value[i][j] += coeff * (epsilon[j][k][l] * h[k] * S[i][l] + epsilon[j][k][l] * (s[i] * W[k][l] + s[l] * W[k][i]) + epsilon[i][k][l] * h[k] * S[j][l] + epsilon[i][k][l] * (s[j] * W[k][l] + s[l] * W[k][j]))
    return value

# c_k coefficients
c_k = [0.0238095238095238095238095238095238095238095238095238095238095, 0.0234375000000000000000000000000000000000000000000000000000000, 0.0312500000000000000000000000000000000000000000000000000000000, 0, 0.0416666666666666666666666666666666666666666666666666666666667, 0, 0.0500000000000000000000000000000000000000000000000000000000000, 0.0500000000000000000000000000000000000000000000000000000000000, 0, 0.1, 0.0714285714285714285714285714285714285714285714285714285714286, 0, 0.138413023680782974005350203145033146748813640089941234591267, 0.215872690604931311708935511140681138965472074195773051123019, 0.243809523809523809523809523809523809523809523809523809523810, 0.215872690604931311708935511140681138965472074195773051123019, 0.138413023680782974005350203145033146748813640089941234591267, -0.0714285714285714285714285714285714285714285714285714285714286, -0.1, -0.05, -0.05, -0.0416666666666666666666666666666666666666666666666666666666667, -0.0312500000000000000000000000000000000000000000000000000000000, -0.0234375000000000000000000000000000000000000000000000000000000, 0.0238095238095238095238095238095238095238095238095238095238095]
# b_ij coefficients
b_ij = [
    [0.200000000000000000000000000000000000000000000000000000000000], 
    [-0.216049382716049382716049382716049382716049382716049382716049, 0.771604938271604938271604938271604938271604938271604938271605],   
    [0.208333333333333333333333333333333333333333333333333333333333, 0, 0.625000000000000000000000000000000000000000000000000000000000],   
    [0.193333333333333333333333333333333333333333333333333333333333, 0, 0.220000000000000000000000000000000000000000000000000000000000, -0.0800000000000000000000000000000000000000000000000000000000000],  
    [0.100000000000000000000000000000000000000000000000000000000000, 0, 0, 0.400000000000000000000000000000000000000000000000000000000000, 0.500000000000000000000000000000000000000000000000000000000000],
    [0.103364471650010477570395435690481791543342708330349879244197, 0, 0, 0.124053094528946761061581889237115328211074784955180298044074, 0.483171167561032899288836480451962508724109257517289177302380, -0.0387530245694763252085681443767620580395733302341368038804290],
    [0.124038261431833324081904585980175168140024670698633612292480, 0, 0, 0, 0.217050632197958486317846256953159942875916353757734167684657, 0.0137455792075966759812907801835048190594443990939408530842918, -0.0661095317267682844455831341498149531672668252085016565917546],
    [0.0914774894856882983144991846980432197088832099976660100090486, 0, 0, 0, 0, -0.00544348523717469689965754944144838611346156873847009178068318, 0.0680716801688453518578515120895103863112751730758794372203952, 0.408394315582641046727306852653894780093303185664924644551239],
    [0.0890013652502551018954509355423841780143232697403434118692699, 0, 0, 0, 0, 0.00499528226645532360197793408420692800405891149406814091955810, 0.397918238819828997341739603001347156083435060931424970826304, 0.427930210752576611068192608300897981558240730580396406312359, -0.0865117637557827005740277475955029103267246394128995965941585],
    [0.0695087624134907543112693906409809822706021061685544615255758, 0, 0, 0, 0, 0.129146941900176461970759579482746551122871751501482634045487, 1.53073638102311295076342566143214939031177504112433874313011, 0.577874761129140052546751349454576715334892100418571882718036, -0.951294772321088980532340837388859453930924498799228648050949, -0.408276642965631951497484981519757463459627174520978426909934],
    [0.0444861403295135866269453507092463581620165501018684152933313, 0, 0, 0, 0, -0.00380476867056961731984232686574547203016331563626856065717964, 0.0106955064029624200721262602809059154469206077644957399593972, 0.0209616244499904333296674205928919920806734650660039898074652, -0.0233146023259321786648561431551978077665337818756053603898847, 0.00263265981064536974369934736325334761174975280887405725010964, 0.00315472768977025060103545855572111407955208306374459723959783],
    [0.0194588815119755475588801096525317761242073762016273186231215, 0, 0, 0, 0, 0, 0, 0, 0.0000678512949171812509306121653452367476194364781259165332321534, -0.0000429795859049273623271005330230162343568863387724883603675550, 0.0000176358982260285155407485928953302139937553442829975734148981, 0.0653866627415027051009595231385181033549511358787382098351924],
    [0.206836835664277105916828174798272361078909196043446411598231, 0, 0, 0, 0, 0, 0, 0, 0.0166796067104156472828045866664696450306326505094792505215514, -0.00879501563200710214457024178249986591130234990219959208704979, 0.00346675455362463910824462315246379209427513654098596403637231, -0.861264460105717678161432562258351242030270498966891201799225, 0.908651882074050281096239478469262145034957129939256789178785],
    [0.0203926084654484010091511314676925686038504449562413004562382, 0, 0, 0, 0, 0, 0, 0, 0.0869469392016685948675400555583947505833954460930940959577347, -0.0191649630410149842286436611791405053287170076602337673587681, 0.00655629159493663287364871573244244516034828755253746024098838, 0.0987476128127434780903798528674033899738924968006632201445462, 0.00535364695524996055083260173615567408717110247274021056118319, 0.301167864010967916837091303817051676920059229784957479998077],
    [0.228410433917778099547115412893004398779136994596948545722283, 0, 0, 0, 0, 0, 0, 0, -0.498707400793025250635016567442511512138603770959682292383042, 0.134841168335724478552596703792570104791700727205981058201689, -0.0387458244055834158439904226924029230935161059142806805674360, -1.27473257473474844240388430824908952380979292713250350199641, 1.43916364462877165201184452437038081875299303577911839630524, -0.214007467967990254219503540827349569639028092344812795499026, 0.958202417754430239892724139109781371059908874605153648768037],
    [2.00222477655974203614249646012506747121440306225711721209798, 0, 0, 0, 0, 0, 0, 0, 2.06701809961524912091954656438138595825411859673341600679555, 0.623978136086139541957471279831494466155292316167021080663140, -0.0462283685500311430283203554129062069391947101880112723185773, -8.84973288362649614860075246727118949286604835457092701094630, 7.74257707850855976227437225791835589560188590785037197433615, -0.588358519250869210993353314127711745644125882130941202896436, -1.10683733362380649395704708016953056176195769617014899442903, -0.929529037579203999778397238291233214220788057511899747507074],
    [3.13789533412073442934451608989888796808161259330322100268310, 0, 0, 0, 0, 0.129146941900176461970759579482746551122871751501482634045487, 1.53073638102311295076342566143214939031177504112433874313011, 0.577874761129140052546751349454576715334892100418571882718036, 5.42088263055126683050056840891857421941300558851862156403363, 0.231546926034829304872663800877643660904880180835945693836936, 0.0759292995578913560162301311785251873561801342333194895292058, -12.3729973380186513287414553402595806591349822617535905976253, 9.85455883464769543935957209317369202080367765721777101906955, 0.0859111431370436529579357709052367772889980495122329601159540, -5.65242752862643921117182090081762761180392602644189218673969, -1.94300935242819610883833776782364287728724899124166920477873, -0.128352601849404542018428714319344620742146491335612353559923],
    [1.38360054432196014878538118298167716825163268489922519995564, 0, 0, 0, 0, 0.00499528226645532360197793408420692800405891149406814091955810, 0.397918238819828997341739603001347156083435060931424970826304, 0.427930210752576611068192608300897981558240730580396406312359, -1.30299107424475770916551439123047573342071475998399645982146, 0.661292278669377029097112528107513072734573412294008071500699, -0.144559774306954349765969393688703463900585822441545655530145, -6.96576034731798203467853867461083919356792248105919255460819, 6.65808543235991748353408295542210450632193197576935120716437, -1.66997375108841486404695805725510845049807969199236227575796, 2.06413702318035263832289040301832647130604651223986452170089, -0.674743962644306471862958129570837723192079875998405058648892, -0.00115618834794939500490703608435907610059605754935305582045729, -0.00544057908677007389319819914241631024660726585015012485938593],
    [0.951236297048287669474637975894973552166903378983475425758226, 0, 0, 0, 0.217050632197958486317846256953159942875916353757734167684657, 0.0137455792075966759812907801835048190594443990939408530842918, -0.0661095317267682844455831341498149531672668252085016565917546, 0, 0.152281696736414447136604697040747131921486432699422112099617,-0.337741018357599840802300793133998004354643424457539667670080, -0.0192825981633995781534949199286824400469353110630787982121133, -3.68259269696866809932409015535499603576312120746888880201882, 3.16197870406982063541533528419683854018352080342887002331312, -0.370462522106885290716991856022051125477943482284080569177386, -0.0514974200365440434996434456698127984941168616474316871020314, -0.000829625532120152946787043541792848416659382675202720677536554, 0.00000279801041419278598986586589070027583961355402640879503213503, 0.0418603916412360287969841020776788461794119440689356178942252, 0.279084255090877355915660874555379649966282167560126269290222],
    [0.103364471650010477570395435690481791543342708330349879244197, 0, 0, 0.124053094528946761061581889237115328211074784955180298044074, 0.483171167561032899288836480451962508724109257517289177302380, -0.0387530245694763252085681443767620580395733302341368038804290, 0, -0.438313820361122420391059788940960176420682836652600698580091, 0, -0.218636633721676647685111485017151199362509373698288330593486, -0.0312334764394719229981634995206440349766174759626578122323015, 0, 0, 0, 0, 0, 0, 0.0312334764394719229981634995206440349766174759626578122323015, 0.218636633721676647685111485017151199362509373698288330593486, 0.438313820361122420391059788940960176420682836652600698580091],
    [0.193333333333333333333333333333333333333333333333333333333333, 0, 0.220000000000000000000000000000000000000000000000000000000000, -0.0800000000000000000000000000000000000000000000000000000000000, 0, 0, 0.0984256130499315928152900286856048243348202521491288575952143, -0.196410889223054653446526504390100417677539095340135532418849, 0, 0.436457930493068729391826122587949137609670676712525034763317, 0.0652613721675721098560370939805555698350543810708414716730270, 0, 0, 0, 0, 0, 0, -0.0652613721675721098560370939805555698350543810708414716730270, -0.436457930493068729391826122587949137609670676712525034763317, 0.196410889223054653446526504390100417677539095340135532418849, -0.0984256130499315928152900286856048243348202521491288575952143],
    [-0.216049382716049382716049382716049382716049382716049382716049, 0.216049382716049382716049382716049382716049382716049382716049, 0, 0, -0.666666666666666666666666666666666666666666666666666666666667, 0, -0.390696469295978451446999802258495981249099665294395945559163, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.390696469295978451446999802258495981249099665294395945559163, 0.666666666666666666666666666666666666666666666666666666666667],
    [0.200000000000000000000000000000000000000000000000000000000000, 0, -0.164609053497942386831275720164609053497942386831275720164609, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.164609053497942386831275720164609053497942386831275720164609],
    [1.47178724881110408452949550989023611293535315518571691939396, 0.787500000000000000000000000000000000000000000000000000000000, 0.421296296296296296296296296296296296296296296296296296296296, 0, 0.291666666666666666666666666666666666666666666666666666666667, 0, 0.348600717628329563206854421629657569274689947367847465753757, 0.229499544768994849582890233710555447073823569666506700662510, 5.79046485790481979159831978177003471098279506036722411333192, 0.418587511856506868874073759426596207226461447604248151080016, 0.307039880222474002649653817490106690389251482313213999386651, -4.68700905350603332214256344683853248065574415794742040470287, 3.13571665593802262152038152399873856554395436199962915429076, 1.40134829710965720817510506275620441055845017313930508348898, -5.52931101439499023629010306005764336421276055777658156400910, -0.853138235508063349309546894974784906188927508039552519557498, 0.103575780373610140411804607167772795518293914458500175573749, -0.140474416950600941142546901202132534870665923700034957196546, -0.418587511856506868874073759426596207226461447604248151080016, -0.229499544768994849582890233710555447073823569666506700662510, -0.348600717628329563206854421629657569274689947367847465753757, -0.291666666666666666666666666666666666666666666666666666666667, -0.421296296296296296296296296296296296296296296296296296296296, -0.787500000000000000000000000000000000000000000000000000000000]
]

def coeff_rk(n, z):
    value = 0
    
    for i in range(n):
        value += b_ij[n][i] * z[i]
        
    return value

def RK1012(min, max, s, S, W, gamma, alpha, step):
    t = 0
    dt = (max - min) / step
    c = 0

    # Computing W
    W = computing_W()

    with open('dllb_zeeman_test.dat', 'w') as f:
        while t < max:
            h = gamma * h_eff(s) + h_zee # Computing effective field depending on the magnetization s

            vec_s = s[0][0][0]

            s_sqr = sqrt(vec_s[0]**2 + vec_s[1]**2 + vec_s[2]**2)
            
            print "%.8f\t%f\t%f\t%f\t%f" % (1e9*t, vec_s[0], vec_s[1], vec_s[2], s_sqr)
            f.write("%.8f\t%f\t%f\t%f\t%f\n" % (1e9*t, vec_s[0], vec_s[1], vec_s[2], s_sqr))

            for a in range(n[0]):
                for b in range(n[1]):
                    for c in range(n[2]):

                        k = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                        l = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                        m = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]

                        k[0] = dt * F(s[a][b][c], h[a][b][c], W[a][b][c], S[a][b][c], tau)
                        l[0] = dt * G(s[a][b][c], h[a][b][c], W[a][b][c], S[a][b][c], tau)
                        m[0] = dt * H(s[a][b][c], h[a][b][c], W[a][b][c], S[a][b][c], tau)

                        for i in range(1, 25):
                            k[i] = dt * F(s[a][b][c] + coeff_rk(i - 1, k), h[a][b][c], W[a][b][c] + coeff_rk(i - 1, l), S[a][b][c] + coeff_rk(i - 1, m), tau)
                            l[i] = dt * G(s[a][b][c] + coeff_rk(i - 1, k), h[a][b][c], W[a][b][c] + coeff_rk(i - 1, l), S[a][b][c] + coeff_rk(i - 1, m), tau)
                            m[i] = dt * H(s[a][b][c] + coeff_rk(i - 1, k), h[a][b][c], W[a][b][c] + coeff_rk(i - 1, l), S[a][b][c] + coeff_rk(i - 1, m), tau)

                        diff_k = 0
                        diff_l = 0
                        diff_m = 0

                        for i in range(25):
                            diff_k += c_k[i] * k[i]
                            diff_l += c_k[i] * l[i]
                            diff_m += c_k[i] * m[i]

                        s[a][b][c] += diff_k
                        W[a][b][c] += diff_l
                        S[a][b][c] += diff_m

            t += dt

    return s

# Initial values
s = np.zeros(n + (3,))
s[:,:,:,:] = 0
S = np.zeros(n + (3, 3,))
S[:,:,:,:,:] = 0
W = np.zeros(n + (3, 3,))
W[:,:,:,:,:] = 0
s[:,:,:,0]   = 1.0 # s = (1, 0, 0)
S[:,:,:,0,0] = 1.0

# Levi-Civita symbol
epsilon = np.zeros((3,3,3))

for a in range(3):
  for b in range(3):
    for c in range(3):
      if [a,b,c] == [0, 1, 2] or [a,b,c] == [1,2,0] or [a,b,c] == [2,0,1]: 
        epsilon[a][b][c] = 1
      elif a == b or a == c or b == c: 
        epsilon[a][b][c] = 0
      else: 
        epsilon[a][b][c] = -1

# Switching
print "Setting up Zeeman field"
step = 5e3
h_zee = np.tile([0.0, 0.0, 63e7], np.prod(n)).reshape(s.shape) # h_zee = (0, 0, 176 rad.GHz)
alpha = 0.1
coeff = 1 / (1 + alpha * alpha)
s = RK1012(0.0, 1e-7, s, S, W, gamma, alpha, step)